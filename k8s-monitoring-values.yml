cluster:
    name: meta-monitoring-tutorial

destinations:
    - name: loki
      type: loki
      url: http://loki-gateway.monitoring.svc.cluster.local/loki/api/v1/push
    - name: prometheus
      type: prometheus
      url: http://prometheus-server.monitoring.svc.cluster.local/api/v1/write

clusterEvents:
    enabled: true
    collector: alloy-logs
    namespaces:
        - monitoring
        - prod
        - default

nodeLogs:
    enabled: false

podLogs:
    enabled: true
    gatherMethod: kubernetesApi
    collector: alloy-logs
    labelsToKeep:
        [
            'app',
            'app_kubernetes_io_name',
            'container',
            'instance',
            'job',
            'level',
            'namespace',
            'service_name',
            'service_namespace',
            'deployment_environment',
            'deployment_environment_name',
        ]
    structuredMetadata:
        pod: pod
    namespaces:
        - monitoring
        - prod
        - default

alloy-singleton:
    enabled: false

alloy-metrics:
    enabled: true

alloy-logs:
    enabled: true
    alloy:
        mounts:
            varlog: false
            dockercontainers: false
        clustering:
            enabled: true

alloy-profiles:
    enabled: false

alloy-receiver:
    enabled: false

apiVersion: v1
data:
    config.alloy: |-
        // Destination: loki (loki)
        otelcol.exporter.loki "loki" {
          forward_to = [loki.write.loki.receiver]
        }

        loki.write "loki" {
          endpoint {
            url = "http://loki-gateway.monitoring.svc.cluster.local/loki/api/v1/push"
            tls_config {
              insecure_skip_verify = false
            }
            min_backoff_period = "500ms"
            max_backoff_period = "5m"
            max_backoff_retries = "10"
          }
          external_labels = {
            "cluster" = "meta-monitoring-tutorial",
            "k8s_cluster_name" = "meta-monitoring-tutorial",
          }
        }
        // Feature: Cluster Events
        declare "cluster_events" {
          argument "logs_destinations" {
            comment = "Must be a list of log destinations where collected logs should be forwarded to"
          }

          loki.source.kubernetes_events "cluster_events" {
            job_name   = "integrations/kubernetes/eventhandler"
            log_format = "logfmt"
            namespaces = ["monitoring","prod","default"]
            forward_to = [loki.process.cluster_events.receiver]
          }

          loki.process "cluster_events" {

            // add a static source label to the logs so they can be differentiated / restricted if necessary
            stage.static_labels {
              values = {
                "source" = "kubernetes-events",
              }
            }

            // extract some of the fields from the log line, these could be used as labels, structured metadata, etc.
            stage.logfmt {
              mapping = {
                "component" = "sourcecomponent", // map the sourcecomponent field to component
                "kind" = "",
                "level" = "type", // most events don't have a level but they do have a "type" i.e. Normal, Warning, Error, etc.
                "name" = "",
                "node" = "sourcehost", // map the sourcehost field to node
              }
            }
            // set these values as labels, they may or may not be used as index labels in Loki as they can be dropped
            // prior to being written to Loki, but this makes them available
            stage.labels {
              values = {
                "component" = "",
                "kind" = "",
                "level" = "",
                "name" = "",
                "node" = "",
              }
            }

            // if kind=Node, set the node label by copying the instance label
            stage.match {
              selector = "{kind=\"Node\"}"

              stage.labels {
                values = {
                  "node" = "name",
                }
              }
            }

            // set the level extracted key value as a normalized log level
            stage.match {
              selector = "{level=\"Normal\"}"

              stage.static_labels {
                values = {
                  level = "Info",
                }
              }
            }

            // Only keep the labels that are defined in the `keepLabels` list.
            stage.label_keep {
              values = ["job","level","namespace","node","source"]
            }
            forward_to = argument.logs_destinations.value
          }
        }
        cluster_events "feature" {
          logs_destinations = [
            loki.write.loki.receiver,
          ]
        }
        // Feature: Pod Logs
        declare "pod_logs" {
          argument "logs_destinations" {
            comment = "Must be a list of log destinations where collected logs should be forwarded to"
          }

          discovery.relabel "filtered_pods" {
            targets = discovery.kubernetes.pods.targets
            rule {
              source_labels = ["__meta_kubernetes_namespace"]
              action = "replace"
              target_label = "namespace"
            }
            rule {
              source_labels = ["__meta_kubernetes_pod_name"]
              action = "replace"
              target_label = "pod"
            }
            rule {
              source_labels = ["__meta_kubernetes_pod_container_name"]
              action = "replace"
              target_label = "container"
            }
            rule {
              source_labels = ["__meta_kubernetes_namespace", "__meta_kubernetes_pod_container_name"]
              separator = "/"
              action = "replace"
              replacement = "$1"
              target_label = "job"
            }

            // set the container runtime as a label
            rule {
              action = "replace"
              source_labels = ["__meta_kubernetes_pod_container_id"]
              regex = "^(\\S+):\\/\\/.+$"
              replacement = "$1"
              target_label = "tmp_container_runtime"
            }

            // make all labels on the pod available to the pipeline as labels,
            // they are omitted before write to loki via stage.label_keep unless explicitly set
            rule {
              action = "labelmap"
              regex = "__meta_kubernetes_pod_label_(.+)"
            }

            // make all annotations on the pod available to the pipeline as labels,
            // they are omitted before write to loki via stage.label_keep unless explicitly set
            rule {
              action = "labelmap"
              regex = "__meta_kubernetes_pod_annotation_(.+)"
            }

            // explicitly set service_name. if not set, loki will automatically try to populate a default.
            // see https://grafana.com/docs/loki/latest/get-started/labels/#default-labels-for-all-users
            //
            // choose the first value found from the following ordered list:
            // - pod.annotation[resource.opentelemetry.io/service.name]
            // - pod.label[app.kubernetes.io/name]
            // - k8s.pod.name
            // - k8s.container.name
            rule {
              action = "replace"
              source_labels = [
                "__meta_kubernetes_pod_annotation_resource_opentelemetry_io_service_name",
                "__meta_kubernetes_pod_label_app_kubernetes_io_name",
                "__meta_kubernetes_pod_name",
                "__meta_kubernetes_pod_container_name",
              ]
              separator = ";"
              regex = "^(?:;*)?([^;]+).*$"
              replacement = "$1"
              target_label = "service_name"
            }

            // set resource attributes
            rule {
              action = "labelmap"
              regex = "__meta_kubernetes_pod_annotation_resource_opentelemetry_io_(.+)"
            }
            rule {
              source_labels = ["__meta_kubernetes_pod_annotation_k8s_grafana_com_logs_job"]
              regex = "(.+)"
              target_label = "job"
            }
            rule {
              source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
              regex = "(.+)"
              target_label = "app_kubernetes_io_name"
            }
          }

          discovery.kubernetes "pods" {
            role = "pod"
            namespaces {
              names = ["monitoring","prod","default"]
            }
          }

          loki.source.kubernetes "pod_logs" {
            targets = discovery.relabel.filtered_pods.output
            forward_to = [loki.process.pod_logs.receiver]
          }

          loki.process "pod_logs" {
            stage.match {
              selector = "{tmp_container_runtime=~\"containerd|cri-o\"}"
              // the cri processing stage extracts the following k/v pairs: log, stream, time, flags
              stage.cri {}

              // Set the extract flags and stream values as labels
              stage.labels {
                values = {
                  flags  = "",
                  stream  = "",
                }
              }
            }

            stage.match {
              selector = "{tmp_container_runtime=\"docker\"}"
              // the docker processing stage extracts the following k/v pairs: log, stream, time
              stage.docker {}

              // Set the extract stream value as a label
              stage.labels {
                values = {
                  stream  = "",
                }
              }
            }

            // Drop the filename label, since it's not really useful in the context of Kubernetes, where we already have cluster,
            // namespace, pod, and container labels. Drop any structured metadata. Also drop the temporary
            // container runtime label as it is no longer needed.
            stage.label_drop {
              values = [
                "filename",
                "tmp_container_runtime",
              ]
            }
            // set the structured metadata values
            stage.structured_metadata {
              values = {
                "pod" = "pod",
              }
            }

            // Only keep the labels that are defined in the `keepLabels` list.
            stage.label_keep {
              values = ["app","app_kubernetes_io_name","container","instance","job","level","namespace","service_name","service_namespace","deployment_environment","deployment_environment_name"]
            }

            forward_to = argument.logs_destinations.value
          }

          
        }
        pod_logs "feature" {
          logs_destinations = [
            loki.write.loki.receiver,
          ]
        }
kind: ConfigMap
metadata:
    annotations:
        meta.helm.sh/release-name: k8s
        meta.helm.sh/release-namespace: monitoring
    creationTimestamp: '2025-04-02T11:49:04Z'
    labels:
        app.kubernetes.io/managed-by: Helm
    name: k8s-alloy-logs
    namespace: monitoring
    resourceVersion: '142048'
    uid: d42afd27-e6a6-4614-8e6e-078595942a17
